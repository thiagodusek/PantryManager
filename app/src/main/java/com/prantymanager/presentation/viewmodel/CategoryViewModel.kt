package com.prantymanager.presentation.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.prantymanager.domain.entity.Category
import com.prantymanager.domain.usecase.category.AddCategoryUseCase
import com.prantymanager.domain.usecase.category.GetAllCategoriesUseCase
import com.prantymanager.domain.usecase.category.UpdateCategoryUseCase
import com.prantymanager.domain.usecase.category.DeleteCategoryUseCase
import com.prantymanager.domain.usecase.category.GetCategoryByIdUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class CategoryState(
    val name: String = "",
    val categories: List<Category> = emptyList(),
    val isLoading: Boolean = false,
    val errorMessage: String? = null,
    val isSuccess: Boolean = false,
    val nameError: String? = null,
    val editingCategory: Category? = null,
    val showEditDialog: Boolean = false,
    val showDeleteDialog: Boolean = false,
    val categoryToDelete: Category? = null
)

@HiltViewModel
class CategoryViewModel @Inject constructor(
    private val addCategoryUseCase: AddCategoryUseCase,
    private val getAllCategoriesUseCase: GetAllCategoriesUseCase,
    private val updateCategoryUseCase: UpdateCategoryUseCase,
    private val deleteCategoryUseCase: DeleteCategoryUseCase,
    private val getCategoryByIdUseCase: GetCategoryByIdUseCase
) : ViewModel() {

    private val _state = MutableStateFlow(CategoryState())
    val state: StateFlow<CategoryState> = _state.asStateFlow()

    init {
        loadCategories()
    }

    fun onNameChanged(name: String) {
        _state.value = _state.value.copy(
            name = name,
            nameError = null
        )
    }

    fun addCategory() {
        if (!validateCategory()) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                val category = Category(
                    id = 0, // Will be auto-generated by Room
                    name = _state.value.name.trim()
                )
                
                addCategoryUseCase(category)
                loadCategories() // Reload the list
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1000)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    name = "", // Clear the form
                    errorMessage = "Categoria cadastrada com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun startEditCategory(category: Category) {
        _state.value = _state.value.copy(
            editingCategory = category,
            name = category.name,
            showEditDialog = true,
            nameError = null
        )
    }

    fun updateCategory() {
        val editingCategory = _state.value.editingCategory ?: return
        if (!validateCategory(editingCategory.id)) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                val updatedCategory = editingCategory.copy(
                    name = _state.value.name.trim()
                )
                
                updateCategoryUseCase(updatedCategory)
                loadCategories()
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1000)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    showEditDialog = false,
                    editingCategory = null,
                    name = "",
                    errorMessage = "Categoria atualizada com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun confirmDeleteCategory(category: Category) {
        _state.value = _state.value.copy(
            categoryToDelete = category,
            showDeleteDialog = true
        )
    }

    fun deleteCategory() {
        val categoryToDelete = _state.value.categoryToDelete ?: return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                deleteCategoryUseCase(categoryToDelete)
                loadCategories()
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1000)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    showDeleteDialog = false,
                    categoryToDelete = null,
                    errorMessage = "Categoria deletada com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro ao excluir categoria"
                )
            }
        }
    }

    fun cancelEdit() {
        _state.value = _state.value.copy(
            showEditDialog = false,
            editingCategory = null,
            name = "",
            nameError = null
        )
    }

    fun cancelDelete() {
        _state.value = _state.value.copy(
            showDeleteDialog = false,
            categoryToDelete = null
        )
    }

    fun clearSuccess() {
        _state.value = _state.value.copy(isSuccess = false)
    }

    fun clearError() {
        _state.value = _state.value.copy(errorMessage = null)
    }

    private fun validateCategory(excludeId: Long = -1): Boolean {
        val trimmedName = _state.value.name.trim()
        
        if (trimmedName.isBlank()) {
            _state.value = _state.value.copy(nameError = "Nome da categoria é obrigatório")
            return false
        }

        // Check if category already exists (excluding current category when editing)
        val categoryExists = _state.value.categories.any { 
            it.name.equals(trimmedName, ignoreCase = true) && it.id != excludeId
        }
        
        if (categoryExists) {
            _state.value = _state.value.copy(nameError = "Esta categoria já existe")
            return false
        }

        return true
    }

    private fun loadCategories() {
        /*
        // Código de conexão com banco comentado
        viewModelScope.launch {
            try {
                val categories = getAllCategoriesUseCase()
                _state.value = _state.value.copy(categories = categories)
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    errorMessage = "Erro ao carregar categorias: ${e.message}"
                )
            }
        }
        */
        
        // Simulando lista vazia para demonstração
        _state.value = _state.value.copy(categories = emptyList())
    }
}
