package com.pantrymanager.presentation.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pantrymanager.domain.entity.Brand
import com.pantrymanager.domain.usecase.brand.AddBrandUseCase
import com.pantrymanager.domain.usecase.brand.GetAllBrandsUseCase
import com.pantrymanager.domain.usecase.brand.UpdateBrandUseCase
import com.pantrymanager.domain.usecase.brand.DeleteBrandUseCase
import com.pantrymanager.domain.usecase.brand.PopulateBrandsFromOpenAIUseCase
import com.pantrymanager.domain.usecase.brand.RemoveDuplicateBrandsUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

data class BrandState(
    val name: String = "",
    val brands: List<Brand> = emptyList(),
    val selectedBrands: Set<Long> = emptySet(),
    val isSelectionMode: Boolean = false,
    val isLoading: Boolean = false,
    val errorMessage: String? = null,
    val isSuccess: Boolean = false,
    val nameError: String? = null,
    val editingBrand: Brand? = null,
    val showEditDialog: Boolean = false,
    val showDeleteDialog: Boolean = false,
    val brandToDelete: Brand? = null,
    val showMultiDeleteDialog: Boolean = false
)

@HiltViewModel
class BrandViewModel @Inject constructor(
    private val addBrandUseCase: AddBrandUseCase,
    private val getAllBrandsUseCase: GetAllBrandsUseCase,
    private val updateBrandUseCase: UpdateBrandUseCase,
    private val deleteBrandUseCase: DeleteBrandUseCase,
    private val populateBrandsFromOpenAIUseCase: PopulateBrandsFromOpenAIUseCase,
    private val removeDuplicateBrandsUseCase: RemoveDuplicateBrandsUseCase
) : ViewModel() {

    private val _state = MutableStateFlow(BrandState())
    val state: StateFlow<BrandState> = _state.asStateFlow()

    init {
        loadBrands()
    }

    fun onNameChanged(name: String) {
        _state.value = _state.value.copy(
            name = name,
            nameError = null
        )
    }

    fun addBrand() {
        if (!validateBrand()) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                val brand = Brand(
                    id = 0, // Will be auto-generated by Room
                    name = _state.value.name.trim()
                )
                
                addBrandUseCase(brand)
                loadBrands() // Reload the list
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1000)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    name = "", // Clear the form
                    errorMessage = "Marca cadastrada com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun startEditBrand(brand: Brand) {
        _state.value = _state.value.copy(
            editingBrand = brand,
            name = brand.name,
            showEditDialog = true,
            nameError = null
        )
    }

    fun updateBrand() {
        val editingBrand = _state.value.editingBrand ?: return
        if (!validateBrand(editingBrand.id)) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                val updatedBrand = editingBrand.copy(
                    name = _state.value.name.trim()
                )
                
                updateBrandUseCase(updatedBrand)
                loadBrands()
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1000)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    showEditDialog = false,
                    editingBrand = null,
                    errorMessage = "Marca atualizada com sucesso!"
                )
                clearForm()
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun confirmDeleteBrand(brand: Brand) {
        _state.value = _state.value.copy(
            brandToDelete = brand,
            showDeleteDialog = true
        )
    }

    fun deleteBrand() {
        val brandToDelete = _state.value.brandToDelete ?: return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                deleteBrandUseCase(brandToDelete)
                loadBrands()
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1000)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    showDeleteDialog = false,
                    brandToDelete = null,
                    errorMessage = "Marca excluída com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun cancelEdit() {
        _state.value = _state.value.copy(
            showEditDialog = false,
            editingBrand = null
        )
        clearForm()
    }

    fun cancelDelete() {
        _state.value = _state.value.copy(
            showDeleteDialog = false,
            brandToDelete = null
        )
    }

    fun clearSuccess() {
        _state.value = _state.value.copy(isSuccess = false)
    }

    fun clearError() {
        _state.value = _state.value.copy(errorMessage = null)
    }

    // Multiple selection functions
    fun toggleBrandSelection(brandId: Long) {
        val currentSelection = _state.value.selectedBrands
        val newSelection = if (currentSelection.contains(brandId)) {
            currentSelection - brandId
        } else {
            currentSelection + brandId
        }
        
        _state.value = _state.value.copy(
            selectedBrands = newSelection,
            isSelectionMode = newSelection.isNotEmpty()
        )
    }

    fun selectAllBrands() {
        _state.value = _state.value.copy(
            selectedBrands = _state.value.brands.map { it.id }.toSet(),
            isSelectionMode = true
        )
    }

    fun clearSelection() {
        _state.value = _state.value.copy(
            selectedBrands = emptySet(),
            isSelectionMode = false
        )
    }

    fun confirmMultipleDelete() {
        _state.value = _state.value.copy(showMultiDeleteDialog = true)
    }

    fun cancelMultipleDelete() {
        _state.value = _state.value.copy(showMultiDeleteDialog = false)
    }

    fun deleteSelectedBrands() {
        val selectedIds = _state.value.selectedBrands
        if (selectedIds.isEmpty()) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                /*
                // Código de conexão com banco comentado
                selectedIds.forEach { brandId ->
                    deleteBrandUseCase(brandId)
                }
                loadBrands()
                */
                
                // Simulação de delay para mostrar loading
                kotlinx.coroutines.delay(1500)
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    selectedBrands = emptySet(),
                    isSelectionMode = false,
                    showMultiDeleteDialog = false,
                    errorMessage = "${selectedIds.size} marca(s) excluída(s) com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro ao excluir marcas"
                )
            }
        }
    }

    private fun validateBrand(excludeId: Long = -1): Boolean {
        val trimmedName = _state.value.name.trim()
        
        if (trimmedName.isBlank()) {
            _state.value = _state.value.copy(nameError = "Nome da marca é obrigatório")
            return false
        }

        // Check if brand already exists (excluding current brand when editing)
        val brandExists = _state.value.brands.any { 
            it.name.equals(trimmedName, ignoreCase = true) && it.id != excludeId
        }
        
        if (brandExists) {
            _state.value = _state.value.copy(nameError = "Esta marca já existe")
            return false
        }

        return true
    }

    private fun clearForm() {
        _state.value = _state.value.copy(
            name = "",
            nameError = null
        )
    }

    private fun loadBrands() {
        /*
        // Código de conexão com banco comentado
        viewModelScope.launch {
            try {
                val brands = getAllBrandsUseCase()
                _state.value = _state.value.copy(brands = brands)
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    errorMessage = "Erro ao carregar marcas: ${e.message}"
                )
            }
        }
        */
        
        // Simulando marcas de exemplo para demonstração
        _state.value = _state.value.copy(
            brands = listOf(
                Brand(1L, "Nestlé"),
                Brand(2L, "Coca-Cola"),
                Brand(3L, "Unilever"),
                Brand(4L, "P&G"),
                Brand(5L, "Johnson & Johnson")
            )
        )
    }

    /**
     * Busca marcas automaticamente via ChatGPT e cadastra as novas
     */
    fun populateBrandsFromChatGPT() {
        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                val result = populateBrandsFromOpenAIUseCase()
                
                if (result.isSuccess) {
                    val addedCount = result.getOrThrow()
                    loadBrands() // Recarregar lista
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = "✅ $addedCount novas marcas encontradas e cadastradas via ChatGPT!"
                    )
                } else {
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = "Erro ao buscar marcas no ChatGPT: ${result.exceptionOrNull()?.message}"
                    )
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = "Erro ao buscar marcas: ${e.message}"
                )
            }
        }
    }

    /**
     * Remove marcas duplicadas do banco de dados
     */
    fun removeDuplicateBrands() {
        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                val result = removeDuplicateBrandsUseCase()
                
                if (result.isSuccess) {
                    val removedCount = result.getOrThrow()
                    loadBrands() // Recarregar lista
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = if (removedCount > 0) {
                            "✅ $removedCount marcas duplicadas foram removidas!"
                        } else {
                            "✅ Nenhuma marca duplicada encontrada!"
                        }
                    )
                } else {
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = "Erro ao remover duplicatas: ${result.exceptionOrNull()?.message}"
                    )
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = "Erro ao remover duplicatas: ${e.message}"
                )
            }
        }
    }
}
