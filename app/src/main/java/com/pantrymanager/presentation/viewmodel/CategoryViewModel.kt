package com.pantrymanager.presentation.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pantrymanager.domain.entity.Category
import com.pantrymanager.domain.usecase.category.AddCategoryUseCase
import com.pantrymanager.domain.usecase.category.GetAllCategoriesUseCase
import com.pantrymanager.domain.usecase.category.UpdateCategoryUseCase
import com.pantrymanager.domain.usecase.category.DeleteCategoryUseCase
import com.pantrymanager.domain.usecase.category.GetCategoryByIdUseCase
import com.pantrymanager.domain.usecase.category.PopulateCategoriesFromOpenAIUseCase
import com.pantrymanager.domain.usecase.category.RemoveDuplicateCategoriesUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay
import javax.inject.Inject

data class CategoryState(
    val name: String = "",
    val categories: List<Category> = emptyList(),
    val selectedCategories: Set<Long> = emptySet(),
    val isSelectionMode: Boolean = false,
    val isLoading: Boolean = false,
    val errorMessage: String? = null,
    val isSuccess: Boolean = false,
    val nameError: String? = null,
    val editingCategory: Category? = null,
    val showEditDialog: Boolean = false,
    val showDeleteDialog: Boolean = false,
    val categoryToDelete: Category? = null,
    val showMultiDeleteDialog: Boolean = false
)

@HiltViewModel
class CategoryViewModel @Inject constructor(
    private val addCategoryUseCase: AddCategoryUseCase,
    private val getAllCategoriesUseCase: GetAllCategoriesUseCase,
    private val updateCategoryUseCase: UpdateCategoryUseCase,
    private val deleteCategoryUseCase: DeleteCategoryUseCase,
    private val getCategoryByIdUseCase: GetCategoryByIdUseCase,
    private val populateCategoriesFromOpenAIUseCase: PopulateCategoriesFromOpenAIUseCase,
    private val removeDuplicateCategoriesUseCase: RemoveDuplicateCategoriesUseCase
) : ViewModel() {

    private val _state = MutableStateFlow(CategoryState())
    val state: StateFlow<CategoryState> = _state.asStateFlow()

    init {
        // Carregar categorias padrão imediatamente
        _state.value = _state.value.copy(
            categories = emptyList(), // Categorias do usuário (vazias inicialmente)
            isLoading = false
        )
        // Tentar carregar categorias do usuário em background
        loadCategories()
    }

    fun onNameChanged(name: String) {
        _state.value = _state.value.copy(
            name = name,
            nameError = null
        )
    }

    fun addCategory() {
        if (!validateCategory()) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                println("DEBUG - Adicionando categoria: ${_state.value.name}")
                
                val category = Category(
                    id = 0, // Will be auto-generated by Firebase
                    name = _state.value.name.trim()
                )
                
                addCategoryUseCase(category)
                
                println("DEBUG - Categoria adicionada com sucesso, recarregando lista...")
                
                // Limpa o formulário e loading primeiro
                _state.value = _state.value.copy(
                    name = "",
                    isLoading = false,
                    isSuccess = true,
                    errorMessage = "Categoria cadastrada com sucesso!"
                )
                
                // Depois recarrega a lista
                loadCategories()
            } catch (e: Exception) {
                println("DEBUG - Erro ao adicionar categoria: ${e.message}")
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun startEditCategory(category: Category) {
        _state.value = _state.value.copy(
            editingCategory = category,
            name = category.name,
            showEditDialog = true,
            nameError = null
        )
    }

    fun updateCategory() {
        val editingCategory = _state.value.editingCategory ?: return
        if (!validateCategory(editingCategory.id)) return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                // Código de conexão com banco
                val updatedCategory = editingCategory.copy(
                    name = _state.value.name.trim()
                )
                
                updateCategoryUseCase(updatedCategory)
                loadCategories()
                
                _state.value = _state.value.copy(
                    isLoading = false,
                    isSuccess = true,
                    showEditDialog = false,
                    editingCategory = null,
                    name = "",
                    errorMessage = "Categoria atualizada com sucesso!"
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro desconhecido"
                )
            }
        }
    }

    fun confirmDeleteCategory(category: Category) {
        _state.value = _state.value.copy(
            categoryToDelete = category,
            showDeleteDialog = true
        )
    }

    fun deleteCategory() {
        val categoryToDelete = _state.value.categoryToDelete ?: return

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                println("DEBUG - Iniciando exclusão da categoria: ${categoryToDelete.name} (ID: ${categoryToDelete.id})")
                
                val result = deleteCategoryUseCase(categoryToDelete)
                if (result.isSuccess) {
                    println("DEBUG - Categoria excluída com sucesso, recarregando lista...")
                    
                    // Primeiro limpa o dialog e loading
                    _state.value = _state.value.copy(
                        showDeleteDialog = false,
                        categoryToDelete = null,
                        isLoading = false
                    )
                    
                    // Depois recarrega a lista
                    loadCategories()
                    
                    // Por fim mostra a mensagem de sucesso
                    _state.value = _state.value.copy(
                        isSuccess = true,
                        errorMessage = "Categoria deletada com sucesso!"
                    )
                } else {
                    println("DEBUG - Erro ao excluir categoria: ${result.exceptionOrNull()?.message}")
                    _state.value = _state.value.copy(
                        isLoading = false,
                        showDeleteDialog = false,
                        categoryToDelete = null,
                        errorMessage = "Erro ao excluir categoria: ${result.exceptionOrNull()?.message}"
                    )
                }
            } catch (e: Exception) {
                println("DEBUG - Exceção ao excluir categoria: ${e.message}")
                _state.value = _state.value.copy(
                    isLoading = false,
                    showDeleteDialog = false,
                    categoryToDelete = null,
                    errorMessage = e.message ?: "Erro ao excluir categoria"
                )
            }
        }
    }

    fun cancelEdit() {
        _state.value = _state.value.copy(
            showEditDialog = false,
            editingCategory = null,
            name = "",
            nameError = null
        )
    }

    fun cancelDelete() {
        _state.value = _state.value.copy(
            showDeleteDialog = false,
            categoryToDelete = null
        )
    }

    fun clearSuccess() {
        _state.value = _state.value.copy(isSuccess = false)
    }

    fun clearError() {
        _state.value = _state.value.copy(errorMessage = null)
    }

    fun toggleCategorySelection(categoryId: Long) {
        val currentSelection = _state.value.selectedCategories
        val newSelection = if (currentSelection.contains(categoryId)) {
            currentSelection - categoryId
        } else {
            currentSelection + categoryId
        }
        
        _state.value = _state.value.copy(
            selectedCategories = newSelection,
            isSelectionMode = newSelection.isNotEmpty()
        )
    }

    fun selectAllCategories() {
        // Include both default categories and saved categories
        val allCategories = com.pantrymanager.data.defaults.DefaultCategories.defaultCategories + _state.value.categories
        _state.value = _state.value.copy(
            selectedCategories = allCategories.map { it.id }.toSet(),
            isSelectionMode = true
        )
    }

    fun clearSelection() {
        _state.value = _state.value.copy(
            selectedCategories = emptySet(),
            isSelectionMode = false
        )
    }

    fun confirmMultipleDelete() {
        _state.value = _state.value.copy(showMultiDeleteDialog = true)
    }

    fun cancelMultipleDelete() {
        _state.value = _state.value.copy(showMultiDeleteDialog = false)
    }

    fun deleteSelectedCategories() {
        val selectedIds = _state.value.selectedCategories
        if (selectedIds.isEmpty()) return

        // Only allow deletion of user-created categories (not default ones)
        // Default categories have negative IDs, user categories have positive IDs
        val userCategoryIds = selectedIds.filter { id -> 
            _state.value.categories.any { it.id == id }
        }
        
        // Debug: Log das categorias selecionadas
        println("DEBUG - Categorias selecionadas: $selectedIds")
        println("DEBUG - Categorias disponíveis: ${_state.value.categories.map { "${it.id}:${it.name}" }}")
        println("DEBUG - Categorias para excluir: $userCategoryIds")
        
        if (userCategoryIds.isEmpty()) {
            _state.value = _state.value.copy(
                errorMessage = "Não é possível excluir categorias padrão do sistema ou nenhuma categoria válida foi selecionada",
                showMultiDeleteDialog = false
            )
            return
        }

        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                // Exclusão real das categorias
                var successCount = 0
                var errorMessages = mutableListOf<String>()
                
                userCategoryIds.forEach { categoryId ->
                    val result = deleteCategoryUseCase(categoryId)
                    if (result.isSuccess) {
                        successCount++
                    } else {
                        errorMessages.add("Erro ao excluir categoria $categoryId: ${result.exceptionOrNull()?.message}")
                    }
                }
                
                // Force refresh após exclusões
                delay(100) // Pequeno delay para garantir que o banco foi atualizado
                loadCategories()
                
                if (successCount > 0) {
                    _state.value = _state.value.copy(
                        isLoading = false,
                        isSuccess = true,
                        selectedCategories = emptySet(),
                        isSelectionMode = false,
                        showMultiDeleteDialog = false,
                        errorMessage = if (errorMessages.isEmpty()) {
                            "$successCount categoria(s) excluída(s) com sucesso!"
                        } else {
                            "$successCount categoria(s) excluída(s). Erros: ${errorMessages.joinToString("; ")}"
                        }
                    )
                } else {
                    _state.value = _state.value.copy(
                        isLoading = false,
                        selectedCategories = emptySet(),
                        isSelectionMode = false,
                        showMultiDeleteDialog = false,
                        errorMessage = "Nenhuma categoria foi excluída. Erros: ${errorMessages.joinToString("; ")}"
                    )
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Erro ao excluir categorias"
                )
            }
        }
    }

    private fun validateCategory(excludeId: Long = -1): Boolean {
        val trimmedName = _state.value.name.trim()
        
        if (trimmedName.isBlank()) {
            _state.value = _state.value.copy(nameError = "Nome da categoria é obrigatório")
            return false
        }

        // Check if category already exists (excluding current category when editing)
        val categoryExists = _state.value.categories.any { 
            it.name.equals(trimmedName, ignoreCase = true) && it.id != excludeId
        }
        
        if (categoryExists) {
            _state.value = _state.value.copy(nameError = "Esta categoria já existe")
            return false
        }

        return true
    }
    
    /**
     * Força uma atualização das categorias (útil após exclusões)
     */
    fun refreshCategories() {
        println("DEBUG - Forçando refresh das categorias")
        loadCategories()
    }
    
    /**
     * Testa conectividade do Firebase
     */
    fun testFirebaseConnectivity() {
        viewModelScope.launch {
            try {
                println("DEBUG - Testando conectividade Firebase...")
                val result = getAllCategoriesUseCase()
                println("DEBUG - Firebase conectado com sucesso. Categorias: ${result.size}")
                _state.value = _state.value.copy(
                    errorMessage = "Firebase conectado! ${result.size} categorias encontradas."
                )
            } catch (e: Exception) {
                println("DEBUG - Erro de conectividade Firebase: ${e.message}")
                _state.value = _state.value.copy(
                    errorMessage = "Problema Firebase: ${e.message}"
                )
            }
        }
    }

    private fun loadCategories() {
        viewModelScope.launch {
            try {
                println("DEBUG - Carregando categorias...")
                _state.value = _state.value.copy(isLoading = true)
                
                val userCategories = getAllCategoriesUseCase()
                println("DEBUG - Categorias carregadas: ${userCategories.size} categorias encontradas")
                
                _state.value = _state.value.copy(
                    categories = userCategories,
                    isLoading = false,
                    errorMessage = null
                )
            } catch (e: Exception) {
                println("DEBUG - Erro ao carregar categorias: ${e.message}")
                _state.value = _state.value.copy(
                    categories = emptyList(),
                    isLoading = false,
                    errorMessage = "Erro ao carregar categorias: ${e.message}"
                )
            }
        }
    }
    
    /**
     * Busca categorias automaticamente via ChatGPT e cadastra as novas
     */
    fun populateCategoriesFromChatGPT() {
        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                val result = populateCategoriesFromOpenAIUseCase()
                
                if (result.isSuccess) {
                    val addedCount = result.getOrThrow()
                    loadCategories() // Recarregar lista
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = "✅ $addedCount novas categorias encontradas e cadastradas via ChatGPT!"
                    )
                } else {
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = "Erro ao buscar categorias no ChatGPT: ${result.exceptionOrNull()?.message}"
                    )
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = "Erro ao buscar categorias: ${e.message}"
                )
            }
        }
    }
    
    /**
     * Remove categorias duplicadas
     */
    fun removeDuplicateCategories() {
        viewModelScope.launch {
            _state.value = _state.value.copy(isLoading = true, errorMessage = null)
            
            try {
                val result = removeDuplicateCategoriesUseCase()
                
                if (result.isSuccess) {
                    val removedCount = result.getOrThrow()
                    loadCategories() // Recarregar lista
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = if (removedCount > 0) "🗑️ $removedCount categorias duplicadas removidas!" 
                                     else "Nenhuma categoria duplicada encontrada."
                    )
                } else {
                    _state.value = _state.value.copy(
                        isLoading = false,
                        errorMessage = "Erro ao remover duplicatas: ${result.exceptionOrNull()?.message}"
                    )
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    errorMessage = "Erro ao remover duplicatas: ${e.message}"
                )
            }
        }
    }
}
